/**********************************************************************
 * This file is part of "Object Teams Dynamic Runtime Environment"
 * 
 * Copyright 2009, 2012 Oliver Frank and others.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Please visit http://www.eclipse.org/objectteams for updates and contact.
 * 
 * Contributors:
 *		Oliver Frank - Initial API and implementation
 *		Stephan Herrmann - Initial API and implementation
 **********************************************************************/
package org.eclipse.objectteams.otredyn.bytecode.asm;

import org.eclipse.objectteams.otredyn.bytecode.Method;
import org.eclipse.objectteams.otredyn.transformer.names.ConstantMembers;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.Type;
import org.objectweb.asm.tree.InsnList;
import org.objectweb.asm.tree.InsnNode;
import org.objectweb.asm.tree.IntInsnNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;
import org.objectweb.asm.tree.TypeInsnNode;

/**
 * Creates and adds the instructions,
 * that are needed to access a not visible method from the team
 * in the method access or accessStatic as follows:<br/> <br/>
 * case (memberId) { // generated by CreateSwitchForAccessAdapter <br/>
 *     return orgMethod(args[0], ..., args[args.length]); <br/>
 * }
 * 
 * @author Oliver Frank
 */
public class CreateMethodAccessAdapter extends AbstractTransformableClassNode {
	private Method method;
	private int accessId;
	private Method access;
	private int firstArgIndex;

	public CreateMethodAccessAdapter(Method method, int accessId) {
		this.method = method;
		this.accessId = accessId;
		if (method.isStatic()) {
			access = ConstantMembers.accessStatic;
			firstArgIndex = 0;
		} else {
			access = ConstantMembers.access;
			firstArgIndex = 1;
		}
	}
	
	@Override
	public void transform() {
		MethodNode methodNode = getMethod(method);
		InsnList instructions = new InsnList();
		
		//put "this" on the stack for a non-static method 
		if (!method.isStatic()) {
			instructions.add(new IntInsnNode(Opcodes.ALOAD, 0));
		}
		
		//Unbox arguments
		Type[] args = Type.getArgumentTypes(methodNode.desc);
		
		if (args.length > 0) {
			instructions.add(new IntInsnNode(Opcodes.ALOAD, firstArgIndex + 2));
			
			
			for (int i = 0; i < args.length; i++) {
				if (i < args.length - 1) {
					instructions.add(new InsnNode(Opcodes.DUP));
				}
				instructions.add(createLoadIntConstant(i));
				instructions.add(new InsnNode(Opcodes.AALOAD));
				Type arg = args[i];
				if (arg.getSort() != Type.ARRAY && arg.getSort() != Type.OBJECT) {
					String objectType = AsmTypeHelper.getObjectType(arg);
					instructions.add(new TypeInsnNode(Opcodes.CHECKCAST, objectType));
					instructions.add(AsmTypeHelper.getUnboxingInstructionForType(arg, objectType));
				} else {
					instructions.add(new TypeInsnNode(Opcodes.CHECKCAST, arg.getInternalName()));
				}
			}
		}
		
		//call original method
		int opcode = Opcodes.INVOKEVIRTUAL;
		if (method.isStatic()) {
			opcode = Opcodes.INVOKESTATIC;
		}
		instructions.add(new MethodInsnNode(opcode, name, method.getName(), method.getSignature()));
		
		
		//box return value
		Type returnType = Type.getReturnType(methodNode.desc);

		if (returnType.getSort() != Type.OBJECT &&
				returnType.getSort() != Type.ARRAY &&
				returnType.getSort() != Type.VOID) {
			
				instructions.add(AsmTypeHelper.getBoxingInstructionForType(returnType));
				instructions.add(new InsnNode(Opcodes.ARETURN));
		} else if (returnType.getSort() == Type.VOID) {
			instructions.add(new InsnNode(Opcodes.ACONST_NULL));
			instructions.add(new InsnNode(Opcodes.ARETURN));
		} else {
			instructions.add(new InsnNode(Opcodes.ARETURN));
		}
		
		//add the instructions to a new label in the existing switch
		MethodNode access = getMethod(this.access);
		addNewLabelToSwitch(access.instructions, instructions, accessId);
	}

}
