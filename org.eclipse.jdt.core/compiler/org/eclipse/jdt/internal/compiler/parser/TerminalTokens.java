/*******************************************************************************
 * Copyright (c) 2000, 2012 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * This is an implementation of an early-draft specification developed under the Java
 * Community Process (JCP) and is made available for testing and evaluation purposes
 * only. The code is not compatible with any specification of the JCP.
 *
 *
 * This is an implementation of an early-draft specification developed under the Java
 * Community Process (JCP) and is made available for testing and evaluation purposes
 * only. The code is not compatible with any specification of the JCP.
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *     Technical University Berlin - extended API and implementation
 *******************************************************************************/
package org.eclipse.jdt.internal.compiler.parser;

/**
 * IMPORTANT NOTE: These constants are dedicated to the internal Scanner implementation.
 * It is mirrored in org.eclipse.jdt.core.compiler public package where it is API.
 * The mirror implementation is using the backward compatible ITerminalSymbols constant
 * definitions (stable with 2.0), whereas the internal implementation uses TerminalTokens
 * which constant values reflect the latest parser generation state.
 */
/**
 * Maps each terminal symbol in the java-grammar into a unique integer.
 * This integer is used to represent the terminal when computing a parsing action.
 *
 * Disclaimer : These constant values are generated automatically using a Java
 * grammar, therefore their actual values are subject to change if new keywords
 * were added to the language (for instance, 'assert' is a keyword in 1.4).
 */
public interface TerminalTokens {

	// special tokens not part of grammar - not autogenerated
	int 
		TokenNameNotAToken = 0,
	    TokenNameWHITESPACE = 1000,
		TokenNameCOMMENT_LINE = 1001,
		TokenNameCOMMENT_BLOCK = 1002,
		TokenNameCOMMENT_JAVADOC = 1003;

	int
      TokenNameIdentifier = 14,
      TokenNameabstract = 34,
      TokenNameassert = 87,
      TokenNameboolean = 48,
      TokenNamebreak = 88,
      TokenNamebyte = 49,
      TokenNamecase = 118,
      TokenNamecatch = 115,
      TokenNamechar = 50,
      TokenNameclass = 82,
      TokenNamecontinue = 89,
      TokenNameconst = 131,
      TokenNamedefault = 99,
      TokenNamedo = 90,
      TokenNamedouble = 51,
      TokenNameelse = 121,
      TokenNameenum = 100,
      TokenNameextends = 101,
      TokenNamefalse = 62,
      TokenNamefinal = 35,
      TokenNamefinally = 119,
      TokenNamefloat = 52,
      TokenNamefor = 91,
      TokenNamegoto = 132,
      TokenNameif = 92,
      TokenNameimplements = 129,
      TokenNameimport = 116,
      TokenNameinstanceof = 18,
      TokenNameint = 53,
      TokenNameinterface = 93,
      TokenNamelong = 54,
      TokenNamenative = 36,
      TokenNamenew = 60,
      TokenNamenull = 63,
      TokenNamepackage = 117,
      TokenNameprivate = 37,
      TokenNameprotected = 38,
      TokenNamepublic = 39,
      TokenNamereturn = 94,
      TokenNameshort = 55,
      TokenNamestatic = 32,
      TokenNamestrictfp = 40,
      TokenNamesuper = 59,
      TokenNameswitch = 95,
      TokenNamesynchronized = 41,
      TokenNamethis = 58,
      TokenNamethrow = 96,
      TokenNamethrows = 122,
      TokenNametransient = 42,
      TokenNametrue = 64,
      TokenNametry = 97,
      TokenNamevoid = 56,
      TokenNamevolatile = 43,
      TokenNamewhile = 86,
      TokenNameas = 124,
      TokenNamebase = 44,
      TokenNamecallin = 45,
      TokenNameplayedBy = 130,
      TokenNameprecedence = 120,
      TokenNamereadonly = 46,
      TokenNameteam = 33,
      TokenNametsuper = 61,
      TokenNamewhen = 102,
      TokenNamewith = 114,
      TokenNamewithin = 98,
      TokenNamereplace = 125,
      TokenNameafter = 123,
      TokenNamebefore = 126,
      TokenNameget = 127,
      TokenNameset = 128,
      TokenNameIntegerLiteral = 65,
      TokenNameLongLiteral = 66,
      TokenNameFloatingPointLiteral = 67,
      TokenNameDoubleLiteral = 68,
      TokenNameCharacterLiteral = 69,
      TokenNameStringLiteral = 70,
      TokenNamePLUS_PLUS = 5,
      TokenNameMINUS_MINUS = 6,
      TokenNameEQUAL_EQUAL = 21,
      TokenNameLESS_EQUAL = 15,
      TokenNameGREATER_EQUAL = 16,
      TokenNameNOT_EQUAL = 22,
      TokenNameLEFT_SHIFT = 20,
      TokenNameRIGHT_SHIFT = 13,
      TokenNameUNSIGNED_RIGHT_SHIFT = 17,
      TokenNamePLUS_EQUAL = 103,
      TokenNameMINUS_EQUAL = 104,
      TokenNameMULTIPLY_EQUAL = 105,
      TokenNameDIVIDE_EQUAL = 106,
      TokenNameAND_EQUAL = 107,
      TokenNameOR_EQUAL = 108,
      TokenNameXOR_EQUAL = 109,
      TokenNameREMAINDER_EQUAL = 110,
      TokenNameLEFT_SHIFT_EQUAL = 111,
      TokenNameRIGHT_SHIFT_EQUAL = 112,
      TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL = 113,
      TokenNameOR_OR = 31,
      TokenNameAND_AND = 30,
      TokenNamePLUS = 2,
      TokenNameMINUS = 4,
      TokenNameNOT = 73,
      TokenNameREMAINDER = 10,
      TokenNameXOR = 26,
      TokenNameAND = 23,
      TokenNameMULTIPLY = 9,
      TokenNameOR = 27,
      TokenNameTWIDDLE = 74,
      TokenNameDIVIDE = 11,
      TokenNameGREATER = 12,
      TokenNameLESS = 8,
      TokenNameLPAREN = 24,
      TokenNameRPAREN = 25,
      TokenNameLBRACE = 76,
      TokenNameRBRACE = 57,
      TokenNameLBRACKET = 3,
      TokenNameRBRACKET = 77,
      TokenNameSEMICOLON = 28,
      TokenNameQUESTION = 29,
      TokenNameCOLON = 75,
      TokenNameCOMMA = 47,
      TokenNameDOT = 1,
      TokenNameEQUAL = 83,
      TokenNameAT = 19,
      TokenNameELLIPSIS = 85,
      TokenNameARROW = 78,
      TokenNameCOLON_COLON = 7,
      TokenNameBeginLambda = 71,
      TokenNameBeginTypeArguments = 81,
      TokenNameElidedSemicolonAndRightBrace = 80,
      TokenNameBINDIN = 84,
      TokenNameCALLOUT_OVERRIDE = 79,
      TokenNameEOF = 72,
      TokenNameERROR = 133;


	// This alias is statically inserted by generateOTParser.sh:
	int TokenNameBINDOUT = TokenNameARROW;
}

