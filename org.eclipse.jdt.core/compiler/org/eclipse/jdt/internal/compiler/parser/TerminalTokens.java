/*******************************************************************************
 * Copyright (c) 2000, 2012 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * This is an implementation of an early-draft specification developed under the Java
 * Community Process (JCP) and is made available for testing and evaluation purposes
 * only. The code is not compatible with any specification of the JCP.
 *
 *
 * This is an implementation of an early-draft specification developed under the Java
 * Community Process (JCP) and is made available for testing and evaluation purposes
 * only. The code is not compatible with any specification of the JCP.
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *     Technical University Berlin - extended API and implementation
 *******************************************************************************/
package org.eclipse.jdt.internal.compiler.parser;

/**
 * IMPORTANT NOTE: These constants are dedicated to the internal Scanner implementation.
 * It is mirrored in org.eclipse.jdt.core.compiler public package where it is API.
 * The mirror implementation is using the backward compatible ITerminalSymbols constant
 * definitions (stable with 2.0), whereas the internal implementation uses TerminalTokens
 * which constant values reflect the latest parser generation state.
 */
/**
 * Maps each terminal symbol in the java-grammar into a unique integer.
 * This integer is used to represent the terminal when computing a parsing action.
 *
 * Disclaimer : These constant values are generated automatically using a Java
 * grammar, therefore their actual values are subject to change if new keywords
 * were added to the language (for instance, 'assert' is a keyword in 1.4).
 */
public interface TerminalTokens {

	// special tokens not part of grammar - not autogenerated
	int 
		TokenNameNotAToken = 0,
	    TokenNameWHITESPACE = 1000,
		TokenNameCOMMENT_LINE = 1001,
		TokenNameCOMMENT_BLOCK = 1002,
		TokenNameCOMMENT_JAVADOC = 1003;

	int
      TokenNameIdentifier = 19,
      TokenNameabstract = 54,
      TokenNameassert = 80,
      TokenNameboolean = 104,
      TokenNamebreak = 81,
      TokenNamebyte = 105,
      TokenNamecase = 116,
      TokenNamecatch = 117,
      TokenNamechar = 106,
      TokenNameclass = 72,
      TokenNamecontinue = 82,
      TokenNameconst = 134,
      TokenNamedefault = 103,
      TokenNamedo = 83,
      TokenNamedouble = 107,
      TokenNameelse = 122,
      TokenNameenum = 74,
      TokenNameextends = 108,
      TokenNamefalse = 40,
      TokenNamefinal = 55,
      TokenNamefinally = 120,
      TokenNamefloat = 109,
      TokenNamefor = 84,
      TokenNamegoto = 135,
      TokenNameif = 85,
      TokenNameimplements = 130,
      TokenNameimport = 118,
      TokenNameinstanceof = 16,
      TokenNameint = 110,
      TokenNameinterface = 73,
      TokenNamelong = 111,
      TokenNamenative = 56,
      TokenNamenew = 37,
      TokenNamenull = 41,
      TokenNamepackage = 119,
      TokenNameprivate = 57,
      TokenNameprotected = 58,
      TokenNamepublic = 59,
      TokenNamereturn = 86,
      TokenNameshort = 112,
      TokenNamestatic = 51,
      TokenNamestrictfp = 60,
      TokenNamesuper = 35,
      TokenNameswitch = 87,
      TokenNamesynchronized = 52,
      TokenNamethis = 36,
      TokenNamethrow = 88,
      TokenNamethrows = 123,
      TokenNametransient = 61,
      TokenNametrue = 42,
      TokenNametry = 89,
      TokenNamevoid = 113,
      TokenNamevolatile = 62,
      TokenNamewhile = 79,
      TokenNameas = 131,
      TokenNamebase = 32,
      TokenNamecallin = 63,
      TokenNameplayedBy = 132,
      TokenNameprecedence = 121,
      TokenNamereadonly = 64,
      TokenNameteam = 53,
      TokenNametsuper = 38,
      TokenNamewhen = 114,
      TokenNamewith = 115,
      TokenNamewithin = 90,
      TokenNamereplace = 126,
      TokenNameafter = 124,
      TokenNamebefore = 127,
      TokenNameget = 128,
      TokenNameset = 129,
      TokenNameIntegerLiteral = 43,
      TokenNameLongLiteral = 44,
      TokenNameFloatingPointLiteral = 45,
      TokenNameDoubleLiteral = 46,
      TokenNameCharacterLiteral = 47,
      TokenNameStringLiteral = 48,
      TokenNamePLUS_PLUS = 2,
      TokenNameMINUS_MINUS = 3,
      TokenNameEQUAL_EQUAL = 20,
      TokenNameLESS_EQUAL = 13,
      TokenNameGREATER_EQUAL = 14,
      TokenNameNOT_EQUAL = 21,
      TokenNameLEFT_SHIFT = 18,
      TokenNameRIGHT_SHIFT = 15,
      TokenNameUNSIGNED_RIGHT_SHIFT = 17,
      TokenNamePLUS_EQUAL = 91,
      TokenNameMINUS_EQUAL = 92,
      TokenNameMULTIPLY_EQUAL = 93,
      TokenNameDIVIDE_EQUAL = 94,
      TokenNameAND_EQUAL = 95,
      TokenNameOR_EQUAL = 96,
      TokenNameXOR_EQUAL = 97,
      TokenNameREMAINDER_EQUAL = 98,
      TokenNameLEFT_SHIFT_EQUAL = 99,
      TokenNameRIGHT_SHIFT_EQUAL = 100,
      TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL = 101,
      TokenNameOR_OR = 31,
      TokenNameAND_AND = 30,
      TokenNamePLUS = 4,
      TokenNameMINUS = 5,
      TokenNameNOT = 67,
      TokenNameREMAINDER = 9,
      TokenNameXOR = 26,
      TokenNameAND = 22,
      TokenNameMULTIPLY = 8,
      TokenNameOR = 28,
      TokenNameTWIDDLE = 68,
      TokenNameDIVIDE = 10,
      TokenNameGREATER = 12,
      TokenNameLESS = 11,
      TokenNameLPAREN = 23,
      TokenNameRPAREN = 25,
      TokenNameLBRACE = 50,
      TokenNameRBRACE = 34,
      TokenNameLBRACKET = 7,
      TokenNameRBRACKET = 69,
      TokenNameSEMICOLON = 27,
      TokenNameQUESTION = 29,
      TokenNameCOLON = 66,
      TokenNameCOMMA = 33,
      TokenNameDOT = 1,
      TokenNameEQUAL = 75,
      TokenNameAT = 39,
      TokenNameELLIPSIS = 125,
      TokenNameARROW = 76,
      TokenNameCOLON_COLON = 6,
      TokenNameBeginLambda = 49,
      TokenNameBeginTypeArguments = 78,
      TokenNameElidedSemicolonAndRightBrace = 70,
      TokenNameAT308 = 24,
      TokenNameAT308DOTDOTDOT = 133,
      TokenNameBINDIN = 77,
      TokenNameCALLOUT_OVERRIDE = 102,
      TokenNameSYNTHBINDOUT = 71,
      TokenNameEOF = 65,
      TokenNameERROR = 136;


	// This alias is statically inserted by generateOTParser.sh:
	int TokenNameBINDOUT = TokenNameARROW;
}

